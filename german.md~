# legacylisten - Deutsch
`legacylisten` ist ein einfacher CLI Musikspieler, den ich geschrieben
habe, da kein existierender meinen Bedürfnissen entsprach.  Die
Hauptbesonderheit ist, dass man ändern kann, wie oft ein Lied
abgespielt wird (`legacylisten` ist immer Shuffle-all), aber es gibt
auch einige noch komischere Funktionen.

## Funktionsweise
`legacylisten` erzeugt eine Liste aller Lieder in
`~/.zvavybir/legacylisten/data`[^1] zusammen mit ihrer
"Spielwahrscheinlichkeit" und Lautstärke (die Standardwerte sind 10
und 10% respektive).  Dann wählt es ein zufälliges Lied mit
Wahrscheinlichkeit proportional seiner Spielwahrscheinlichkeit aus und
spielt es bis der Nutzer es etwas anderes sagt.

Die Lautstärke is pro Lied anpassbar und wird gespeichert.  Obwohl es
einfach wäre (lächerlich trivial sogar) zu implementieren, gibt es
keine Möglichkeit die globale Lautstärke zu verändern, da ich finde,
dass man dies besser dem Betriebsystem überlässt.  Worin sich ein
Musikspieler hervortun kann, ist zu wissen, welches Lied gespielt wird
und darauf zu reagieren.  Die Idee hinter dieser Funktion ist die
Lautstärke von sehr leisen Liedern einmal zu erhöhen und sich dann
nicht mehr darum kümmern zu müssen.

Eine andere ziemlich komische Funktion ist das man nicht nur sofort
stoppen/beenden kann, sondern auch wenn das aktuelle Lied zu Ende ist.
Das schlimmste ist aber, dass `legacylisten` alle Verbindungen zur
Festplatte trennt, wenn das *NIX Signal `SIGUSR1` gefangen wird und
nur nach `SIGUSR2` wieder Verbindungen aufnimmt.  `SIGUSR1`
unterbricht allerdings kein bereits spielendes Lied, da Lieder immer
gepuffert werden[^2].

## Befehle
Befehle sind der Weg mit dem `legacylisten` bedient wird und bestehen
immer aus einem einzigen Zeichen.  Ursprünglich waren sie immer der
erste Buchstabe des Befehlsnamen, da dies aber in sehr komische Namen
resultierte (z.b. `f` – "**f**ainter" *schwächer* – um die Lautstärke
zu verringern), habe ich mich entschieden sie einfach alphabetisch
durch zu nummerieren.

Um ein Befehl auszuführen, tippe einfach sein Buchstaben ein (aber
denke daran, dass Terminals üblicherweise Zeilengepuffert sind,
d.h. `legacylisten` sieht – und reagiert auf – die Eingabe nur nachdem
Enter gedrückt wurde).

Es gibt die folgenden Befehle:

* `?`: Zeigt eine Liste aller Befehle mit Erklärung (mehr oder weniger
  diese Liste).[^3]
* `a`: Erhöht die Spielwahrscheinlichkeit des aktuellen Lieds um 1.
* `b`: Verringert die Spielwahrscheinlichkeit des aktuellen Lieds um 1.
* `c`: Beendet `legacylisten` und speichert die
  Spielwahrscheinlichkeiten und Lautstärken in
  `~/.zvavybir/legacylisten/songs.csv`.
* `d`: Stoppt das Abspielen.
* `e`: Setzt das Abspielen wieder fort nachdem es mit `d` oder `l`
  angehalten wurde (überschreibt `SIGUSR1` allerdings nicht).
* `f`: Überspringt das Lied.
* `g`: Erhöht die Lautstärke des aktuellen Lieds permanent um 1%
  (allerdings nicht auf mehr als 100%).
* `h`: Verringert die Lautstärke des aktuellen Lieds permanent um 1%
  (allerdings nicht auf weniger als 0%).
* `i`: Zeigt an wie lange das Lied schon spielt und – wenn
  verfügbar[^4] – wie lange es isgesammt brauchen wird.
* `j`: Wechselt zwischen Abspielen und Stoppen.
* `k`: Beendet `legacylisten` sobald das aktuelle Lied fertig ist (`k`
  nimmt Vorrang zu `l`).
* `l`: Wie `k`, stoppt aber nur anstatt zu beenden.
* `m`: Zeigt die Metadaten im id3-Tag des Lieds (die Länge muss
  üblicherweise mit `i` nach gefragt werden, da sie nur selten im
  id3-Tag gespeichert wird).
* `n`: Öffnet das Cover in dem eingestellten Bildgetrachter (diese
  Funktion nutzt `mimeopen` was so viel ich weiß unter Windows nicht
  verfügbar ist).  Wenn das Lied kein Cover hat wird
  `~/.zvavybir/legacylisten/default.png` stattdessen geöffnet.  Für
  das Bild, das ich nutze (und gemacht habe, also ziemlich schlecht
  ist) siehe
  [hier](https://github.com/zvavybir/legacylisten/blob/master/imgs/default.png).
* `o`: Stops all repeating (but if the current songs is an repetition
  it's not ended immediately; if you want that also skip with `f`).
* `p`: Repeats the current song once.
* `q`: Repeats the current song forever.
* `r`: Skips to the beginning of the current song or – if it already
  is at the beginning – to the previous one.  You can go as many songs
  back as you want (or more precisely how many there are).  All played
  songs are saved (but only in one run of `legacylisten`, if you
  restart it the history is lost) and if you went back the next song
  is the same as previously followed on that song.

## Low memory handler
As already briefly pointed out previously, especially older versions
of `legacylisten` had an horrendous memory footprint, which rendered
my system unusable for a few seconds a couple times.  Under Linux such
problems are usually handled by the OOM killer (which ends the process
with least importance and largest memory consuption), but it turns out
that the Chromium web browser (the free software variant of Google
Chrome), which out ouf other reasons I'm forced to use every once in a
while, is even worse than my program.  Instead of doing something
sensible, I added a routine to `legacylisten` that watches the amount
of free memory and terminates itself when it falls under some certain
(configurable) threshold (a GiB currently).

This uses currently a wrong notion of "free ram" (it counts memory
used for disk caching as used although it's not; see [this famous
size](https://www.linuxatemyram.com/) for more), so it stops
unnecessarily.  Although this is better than the reverse, the low
memory handler is off as default because of that.

This uses the *NIX function `sysconf(3)`, so it won't work on outdated
platforms.

## Configuration file
`legacylisten` can be configured by the
`~/.zvavybir/legacylisten/conffile.csv` file.  Despite it's file
extension it's *not* a real CSV file, just very much inspired by it.
If an option can't be parsed it's just silently ignored, so be
careful.  Every option has an own line (with mandatory newline at the
end, even for the last line and under MS Windows) and every part of it
has to be comma-seperated (and every line has to end with a comma).
As an example, this is my configuration file:
```
data_dir,/media/my_user_name/external_harddrive/legacylisten,
ignore_ram,false,
lang,german,
```
There are currently four possible options:
* `data_dir`: If you have your music collection somewhere else (like
  me on an external hard drive or in `~/Music`) you can use this
  option to change the directory `legacylisten` will search.  The `~/`
  notation is not usable in the configuration file, even under *NIX
  systems.
* `minimum_ram`: The threshold for the [low memory
  handler](#low-memory-handler) in bytes.
* `ignore_ram`: Disables the low memory handler (possible values are
  `true` and `false`).  If this is set (currently the default)
  `minimum_ram` is ignored.
* `lang`: `legacylisten` supports basic internationalization and this
  is the option to activate it.  There are currently three possible
  values for this option:
  * `english`: Sets the language to English (this is the default).
  * `german` or `deutsch`: Sets the language to German.
  * `custom`: If you have a translation file, but it's not included in
    the offical sources (maybe because you're still working on
    finishing it, you just want to try something out or you are
    forbidden by legal reasons to publish it under `legacylisten`'s
    [license](#license)) this option enables you to still use it.
    This option requires two further values, the path to the
    translation file and the language ID.  As an example, if English
    weren't included already you could use such an option to ignore
    that:
	```
	lang,custom,/path/to/file/translation.fl,en-US,
	```
	The path has no requirements about filename or file
    extension, but the language identifier *has* to be correct.

## Contributing
As every software `legacylisten` too always can be improved .  While
I'm trying to get it usuable alone, I don't have unlimited time and
especially not always the best ideas.  If you can help with that or on
some other way (like with a feature request, an additional language or
documentation improvements) please see
[here](https://github.com/zvavybir/legacylisten/issues) to get
started.

I assume that unless stated otherwise every contribution follows the
necessary license.

## License
Though unusual for an rust program, `legacylisten` is released under
the GNU General Public License version 3 or (at your option) any later
version.

For more see
[LICENSE.md](https://github.com/zvavybir/legacylisten/blob/master/LICENSE.md).

[^1]: Obwohl es nicht beabsichtigt war ([even to the
    contrary](https://www.fefe.de/nowindows/)), sollte `legacylisten`
    mehr oder weniger portabel sein (`~/` steht für das
    Benutzerverzeichnis – in `legacylisten` sogar unter MS Windows).

[^2]: Das ist natürlich ziemlich schlecht für den
    Arbeitsspeicherfußabdruck, aber es ist das beste was ich bisher
    machen konnte (zu mindestens ist es eine ganze Größenordnung
    besser als die schlimmste Implemenation, die ich hatte).  Wenn du
    eine bessere Idee hast, **bitte** [helfe mit](#mithelfen)!

[^3]: Dieser Befehl ist ein bisschen speziell, da er intern anderes
    verarbeitet wird.  Man kann das zum einen an dem speziallen Namen
    (einzigster Befehl ohne Buchstabe) sehen, andererseits (während
    man `legacylisten` ausführt) daran, dass obwohl Befehl
    üblicherweise streng in der angegebenen Reihenfolge ausgeführt
    werden, dieser vor allen anderen auf der selben Zeile ausgeführt
    wird.

[^4]: `legacylisten` versucht es aus den Metadaten der Audiodatei zu
    lesen oder – wenn das scheitert (was oft passiert, da die
    verwendete Routine sich noch in der Entwicklung zu sein scheint) –
    dekodiert das ganze Lied ein zweites Mal um die Länge nach einer
    kurzen Wartzeit auf einem einfachen, aber teuren Weg zu bekommen.
    Bis das behoben ist (wenn du eine Idee hast, **bitte** [helfe
    mit](#mithelfen)), würde ich nicht empfehlen mehrere Lieder in
    kurzer Abfolge zu überspringen, da pro Lied ein Thread zum
    Dekodieren gestartet wird – sogar nachdem bereits bekannt ist,
    dass das Ergebnis nicht benötigt werden wird.
